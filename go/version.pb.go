// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: version.proto

package ttp

/*
	Package Name:
*/

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Version struct {
	// TTP is the version of the underlying
	// Tensor Transport Protocol (Buffer).
	TTP int32 `protobuf:"varint,1,opt,name=TTP,proto3" json:"TTP,omitempty"`
	// ApplicationID identifies a specific application
	// that is built on TTP.
	ApplicationID string `protobuf:"bytes,2,opt,name=ApplicationID,proto3" json:"ApplicationID,omitempty"`
	// The version of the application that produced
	// this data.
	ProducerVersion int32 `protobuf:"varint,3,opt,name=ProducerVersion,proto3" json:"ProducerVersion,omitempty"`
	// Any consumer below this version is NOT allowed
	// to consume this data.
	ConsumerVersion int32 `protobuf:"varint,4,opt,name=ConsumerVersion,proto3" json:"ConsumerVersion,omitempty"`
	// Specific consumer versions which are disallowed
	// (e.g. due to bugs).
	BlacklistVersions []int32 `protobuf:"varint,5,rep,packed,name=BlacklistVersions,proto3" json:"BlacklistVersions,omitempty"`
}

func (m *Version) Reset()      { *m = Version{} }
func (*Version) ProtoMessage() {}
func (*Version) Descriptor() ([]byte, []int) {
	return fileDescriptor_version_3710d828b54902da, []int{0}
}
func (m *Version) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Version) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Version.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Version) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Version.Merge(dst, src)
}
func (m *Version) XXX_Size() int {
	return m.Size()
}
func (m *Version) XXX_DiscardUnknown() {
	xxx_messageInfo_Version.DiscardUnknown(m)
}

var xxx_messageInfo_Version proto.InternalMessageInfo

func (m *Version) GetTTP() int32 {
	if m != nil {
		return m.TTP
	}
	return 0
}

func (m *Version) GetApplicationID() string {
	if m != nil {
		return m.ApplicationID
	}
	return ""
}

func (m *Version) GetProducerVersion() int32 {
	if m != nil {
		return m.ProducerVersion
	}
	return 0
}

func (m *Version) GetConsumerVersion() int32 {
	if m != nil {
		return m.ConsumerVersion
	}
	return 0
}

func (m *Version) GetBlacklistVersions() []int32 {
	if m != nil {
		return m.BlacklistVersions
	}
	return nil
}

func init() {
	proto.RegisterType((*Version)(nil), "ttp.Version")
}
func (this *Version) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Version)
	if !ok {
		that2, ok := that.(Version)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Version")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Version but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Version but is not nil && this == nil")
	}
	if this.TTP != that1.TTP {
		return fmt.Errorf("TTP this(%v) Not Equal that(%v)", this.TTP, that1.TTP)
	}
	if this.ApplicationID != that1.ApplicationID {
		return fmt.Errorf("ApplicationID this(%v) Not Equal that(%v)", this.ApplicationID, that1.ApplicationID)
	}
	if this.ProducerVersion != that1.ProducerVersion {
		return fmt.Errorf("ProducerVersion this(%v) Not Equal that(%v)", this.ProducerVersion, that1.ProducerVersion)
	}
	if this.ConsumerVersion != that1.ConsumerVersion {
		return fmt.Errorf("ConsumerVersion this(%v) Not Equal that(%v)", this.ConsumerVersion, that1.ConsumerVersion)
	}
	if len(this.BlacklistVersions) != len(that1.BlacklistVersions) {
		return fmt.Errorf("BlacklistVersions this(%v) Not Equal that(%v)", len(this.BlacklistVersions), len(that1.BlacklistVersions))
	}
	for i := range this.BlacklistVersions {
		if this.BlacklistVersions[i] != that1.BlacklistVersions[i] {
			return fmt.Errorf("BlacklistVersions this[%v](%v) Not Equal that[%v](%v)", i, this.BlacklistVersions[i], i, that1.BlacklistVersions[i])
		}
	}
	return nil
}
func (this *Version) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Version)
	if !ok {
		that2, ok := that.(Version)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TTP != that1.TTP {
		return false
	}
	if this.ApplicationID != that1.ApplicationID {
		return false
	}
	if this.ProducerVersion != that1.ProducerVersion {
		return false
	}
	if this.ConsumerVersion != that1.ConsumerVersion {
		return false
	}
	if len(this.BlacklistVersions) != len(that1.BlacklistVersions) {
		return false
	}
	for i := range this.BlacklistVersions {
		if this.BlacklistVersions[i] != that1.BlacklistVersions[i] {
			return false
		}
	}
	return true
}
func (this *Version) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&ttp.Version{")
	s = append(s, "TTP: "+fmt.Sprintf("%#v", this.TTP)+",\n")
	s = append(s, "ApplicationID: "+fmt.Sprintf("%#v", this.ApplicationID)+",\n")
	s = append(s, "ProducerVersion: "+fmt.Sprintf("%#v", this.ProducerVersion)+",\n")
	s = append(s, "ConsumerVersion: "+fmt.Sprintf("%#v", this.ConsumerVersion)+",\n")
	s = append(s, "BlacklistVersions: "+fmt.Sprintf("%#v", this.BlacklistVersions)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringVersion(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Version) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Version) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TTP != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVersion(dAtA, i, uint64(m.TTP))
	}
	if len(m.ApplicationID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVersion(dAtA, i, uint64(len(m.ApplicationID)))
		i += copy(dAtA[i:], m.ApplicationID)
	}
	if m.ProducerVersion != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVersion(dAtA, i, uint64(m.ProducerVersion))
	}
	if m.ConsumerVersion != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVersion(dAtA, i, uint64(m.ConsumerVersion))
	}
	if len(m.BlacklistVersions) > 0 {
		dAtA2 := make([]byte, len(m.BlacklistVersions)*10)
		var j1 int
		for _, num1 := range m.BlacklistVersions {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintVersion(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	return i, nil
}

func encodeVarintVersion(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedVersion(r randyVersion, easy bool) *Version {
	this := &Version{}
	this.TTP = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.TTP *= -1
	}
	this.ApplicationID = string(randStringVersion(r))
	this.ProducerVersion = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.ProducerVersion *= -1
	}
	this.ConsumerVersion = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.ConsumerVersion *= -1
	}
	v1 := r.Intn(10)
	this.BlacklistVersions = make([]int32, v1)
	for i := 0; i < v1; i++ {
		this.BlacklistVersions[i] = int32(r.Int31())
		if r.Intn(2) == 0 {
			this.BlacklistVersions[i] *= -1
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyVersion interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneVersion(r randyVersion) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringVersion(r randyVersion) string {
	v2 := r.Intn(100)
	tmps := make([]rune, v2)
	for i := 0; i < v2; i++ {
		tmps[i] = randUTF8RuneVersion(r)
	}
	return string(tmps)
}
func randUnrecognizedVersion(r randyVersion, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldVersion(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldVersion(dAtA []byte, r randyVersion, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateVersion(dAtA, uint64(key))
		v3 := r.Int63()
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		dAtA = encodeVarintPopulateVersion(dAtA, uint64(v3))
	case 1:
		dAtA = encodeVarintPopulateVersion(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateVersion(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateVersion(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateVersion(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateVersion(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Version) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TTP != 0 {
		n += 1 + sovVersion(uint64(m.TTP))
	}
	l = len(m.ApplicationID)
	if l > 0 {
		n += 1 + l + sovVersion(uint64(l))
	}
	if m.ProducerVersion != 0 {
		n += 1 + sovVersion(uint64(m.ProducerVersion))
	}
	if m.ConsumerVersion != 0 {
		n += 1 + sovVersion(uint64(m.ConsumerVersion))
	}
	if len(m.BlacklistVersions) > 0 {
		l = 0
		for _, e := range m.BlacklistVersions {
			l += sovVersion(uint64(e))
		}
		n += 1 + sovVersion(uint64(l)) + l
	}
	return n
}

func sovVersion(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozVersion(x uint64) (n int) {
	return sovVersion(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Version) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Version{`,
		`TTP:` + fmt.Sprintf("%v", this.TTP) + `,`,
		`ApplicationID:` + fmt.Sprintf("%v", this.ApplicationID) + `,`,
		`ProducerVersion:` + fmt.Sprintf("%v", this.ProducerVersion) + `,`,
		`ConsumerVersion:` + fmt.Sprintf("%v", this.ConsumerVersion) + `,`,
		`BlacklistVersions:` + fmt.Sprintf("%v", this.BlacklistVersions) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringVersion(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Version) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVersion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Version: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Version: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TTP", wireType)
			}
			m.TTP = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVersion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TTP |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVersion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVersion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplicationID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProducerVersion", wireType)
			}
			m.ProducerVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVersion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProducerVersion |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerVersion", wireType)
			}
			m.ConsumerVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVersion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConsumerVersion |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVersion
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BlacklistVersions = append(m.BlacklistVersions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVersion
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthVersion
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BlacklistVersions) == 0 {
					m.BlacklistVersions = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVersion
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BlacklistVersions = append(m.BlacklistVersions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BlacklistVersions", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVersion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVersion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVersion(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVersion
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVersion
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVersion
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthVersion
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowVersion
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipVersion(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthVersion = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVersion   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("version.proto", fileDescriptor_version_3710d828b54902da) }

var fileDescriptor_version_3710d828b54902da = []byte{
	// 237 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4b, 0x2d, 0x2a,
	0xce, 0xcc, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2e, 0x29, 0x29, 0x90, 0x52,
	0x4a, 0xcf, 0x4f, 0xcf, 0xd7, 0x07, 0x0b, 0x24, 0x95, 0xa6, 0xe9, 0x83, 0x78, 0x60, 0x0e, 0x98,
	0x05, 0x51, 0xa8, 0x74, 0x98, 0x91, 0x8b, 0x3d, 0x0c, 0xa2, 0x55, 0x48, 0x80, 0x8b, 0x39, 0x24,
	0x24, 0x40, 0x82, 0x51, 0x81, 0x51, 0x83, 0x35, 0x08, 0xc4, 0x14, 0x52, 0xe1, 0xe2, 0x75, 0x2c,
	0x28, 0xc8, 0xc9, 0x4c, 0x4e, 0x2c, 0xc9, 0xcc, 0xcf, 0xf3, 0x74, 0x91, 0x60, 0x52, 0x60, 0xd4,
	0xe0, 0x0c, 0x42, 0x15, 0x14, 0xd2, 0xe0, 0xe2, 0x0f, 0x28, 0xca, 0x4f, 0x29, 0x4d, 0x4e, 0x2d,
	0x82, 0x1a, 0x25, 0xc1, 0x0c, 0x36, 0x03, 0x5d, 0x18, 0xa4, 0xd2, 0x39, 0x3f, 0xaf, 0xb8, 0x34,
	0x17, 0xa1, 0x92, 0x05, 0xa2, 0x12, 0x4d, 0x58, 0x48, 0x87, 0x4b, 0xd0, 0x29, 0x27, 0x31, 0x39,
	0x3b, 0x27, 0xb3, 0xb8, 0x04, 0x2a, 0x56, 0x2c, 0xc1, 0xaa, 0xc0, 0xac, 0xc1, 0x1a, 0x84, 0x29,
	0xe1, 0x64, 0x72, 0xe3, 0xa1, 0x1c, 0xc3, 0x83, 0x87, 0x72, 0x8c, 0x1f, 0x1e, 0xca, 0x31, 0xfe,
	0x78, 0x28, 0xc7, 0xd8, 0xf0, 0x48, 0x8e, 0x71, 0xc5, 0x23, 0x39, 0xc6, 0x1d, 0x8f, 0xe4, 0x18,
	0x4f, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5,
	0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0x89, 0x0d, 0x1c, 0x04, 0xc6, 0x80,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xd0, 0x45, 0x9b, 0xf0, 0x3c, 0x01, 0x00, 0x00,
}
