// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: transport.proto

package ttp

/*
	///////////////////////////////////////////////////
	Package Name
	///////////////////////////////////////////////////
*/

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import bytes "bytes"

import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Transport struct {
	Target               string             `protobuf:"bytes,1,opt,name=Target,proto3" json:"Target,omitempty"`
	Tensors              map[string]*Tensor `protobuf:"bytes,2,rep,name=Tensors" json:"Tensors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	MetaData             map[string][]byte  `protobuf:"bytes,3,rep,name=MetaData" json:"MetaData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Transport) Reset()      { *m = Transport{} }
func (*Transport) ProtoMessage() {}
func (*Transport) Descriptor() ([]byte, []int) {
	return fileDescriptor_transport_45a2ac20b5748fd6, []int{0}
}
func (m *Transport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Transport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Transport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Transport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transport.Merge(dst, src)
}
func (m *Transport) XXX_Size() int {
	return m.Size()
}
func (m *Transport) XXX_DiscardUnknown() {
	xxx_messageInfo_Transport.DiscardUnknown(m)
}

var xxx_messageInfo_Transport proto.InternalMessageInfo

func (m *Transport) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *Transport) GetTensors() map[string]*Tensor {
	if m != nil {
		return m.Tensors
	}
	return nil
}

func (m *Transport) GetMetaData() map[string][]byte {
	if m != nil {
		return m.MetaData
	}
	return nil
}

func init() {
	proto.RegisterType((*Transport)(nil), "ttp.Transport")
	proto.RegisterMapType((map[string][]byte)(nil), "ttp.Transport.MetaDataEntry")
	proto.RegisterMapType((map[string]*Tensor)(nil), "ttp.Transport.TensorsEntry")
}
func (this *Transport) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Transport)
	if !ok {
		that2, ok := that.(Transport)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Transport")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Transport but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Transport but is not nil && this == nil")
	}
	if this.Target != that1.Target {
		return fmt.Errorf("Target this(%v) Not Equal that(%v)", this.Target, that1.Target)
	}
	if len(this.Tensors) != len(that1.Tensors) {
		return fmt.Errorf("Tensors this(%v) Not Equal that(%v)", len(this.Tensors), len(that1.Tensors))
	}
	for i := range this.Tensors {
		if !this.Tensors[i].Equal(that1.Tensors[i]) {
			return fmt.Errorf("Tensors this[%v](%v) Not Equal that[%v](%v)", i, this.Tensors[i], i, that1.Tensors[i])
		}
	}
	if len(this.MetaData) != len(that1.MetaData) {
		return fmt.Errorf("MetaData this(%v) Not Equal that(%v)", len(this.MetaData), len(that1.MetaData))
	}
	for i := range this.MetaData {
		if !bytes.Equal(this.MetaData[i], that1.MetaData[i]) {
			return fmt.Errorf("MetaData this[%v](%v) Not Equal that[%v](%v)", i, this.MetaData[i], i, that1.MetaData[i])
		}
	}
	return nil
}
func (this *Transport) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Transport)
	if !ok {
		that2, ok := that.(Transport)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Target != that1.Target {
		return false
	}
	if len(this.Tensors) != len(that1.Tensors) {
		return false
	}
	for i := range this.Tensors {
		if !this.Tensors[i].Equal(that1.Tensors[i]) {
			return false
		}
	}
	if len(this.MetaData) != len(that1.MetaData) {
		return false
	}
	for i := range this.MetaData {
		if !bytes.Equal(this.MetaData[i], that1.MetaData[i]) {
			return false
		}
	}
	return true
}
func (this *Transport) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ttp.Transport{")
	s = append(s, "Target: "+fmt.Sprintf("%#v", this.Target)+",\n")
	keysForTensors := make([]string, 0, len(this.Tensors))
	for k, _ := range this.Tensors {
		keysForTensors = append(keysForTensors, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTensors)
	mapStringForTensors := "map[string]*Tensor{"
	for _, k := range keysForTensors {
		mapStringForTensors += fmt.Sprintf("%#v: %#v,", k, this.Tensors[k])
	}
	mapStringForTensors += "}"
	if this.Tensors != nil {
		s = append(s, "Tensors: "+mapStringForTensors+",\n")
	}
	keysForMetaData := make([]string, 0, len(this.MetaData))
	for k, _ := range this.MetaData {
		keysForMetaData = append(keysForMetaData, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMetaData)
	mapStringForMetaData := "map[string][]byte{"
	for _, k := range keysForMetaData {
		mapStringForMetaData += fmt.Sprintf("%#v: %#v,", k, this.MetaData[k])
	}
	mapStringForMetaData += "}"
	if this.MetaData != nil {
		s = append(s, "MetaData: "+mapStringForMetaData+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTransport(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Transport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Transport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Target) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTransport(dAtA, i, uint64(len(m.Target)))
		i += copy(dAtA[i:], m.Target)
	}
	if len(m.Tensors) > 0 {
		for k, _ := range m.Tensors {
			dAtA[i] = 0x12
			i++
			v := m.Tensors[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovTransport(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovTransport(uint64(len(k))) + msgSize
			i = encodeVarintTransport(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTransport(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintTransport(dAtA, i, uint64(v.Size()))
				n1, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n1
			}
		}
	}
	if len(m.MetaData) > 0 {
		for k, _ := range m.MetaData {
			dAtA[i] = 0x1a
			i++
			v := m.MetaData[k]
			byteSize := 0
			if len(v) > 0 {
				byteSize = 1 + len(v) + sovTransport(uint64(len(v)))
			}
			mapSize := 1 + len(k) + sovTransport(uint64(len(k))) + byteSize
			i = encodeVarintTransport(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTransport(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if len(v) > 0 {
				dAtA[i] = 0x12
				i++
				i = encodeVarintTransport(dAtA, i, uint64(len(v)))
				i += copy(dAtA[i:], v)
			}
		}
	}
	return i, nil
}

func encodeVarintTransport(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedTransport(r randyTransport, easy bool) *Transport {
	this := &Transport{}
	this.Target = string(randStringTransport(r))
	if r.Intn(10) != 0 {
		v1 := r.Intn(10)
		this.Tensors = make(map[string]*Tensor)
		for i := 0; i < v1; i++ {
			this.Tensors[randStringTransport(r)] = NewPopulatedTensor(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v2 := r.Intn(10)
		this.MetaData = make(map[string][]byte)
		for i := 0; i < v2; i++ {
			v3 := r.Intn(100)
			v4 := randStringTransport(r)
			this.MetaData[v4] = make([]byte, v3)
			for i := 0; i < v3; i++ {
				this.MetaData[v4][i] = byte(r.Intn(256))
			}
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyTransport interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneTransport(r randyTransport) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringTransport(r randyTransport) string {
	v5 := r.Intn(100)
	tmps := make([]rune, v5)
	for i := 0; i < v5; i++ {
		tmps[i] = randUTF8RuneTransport(r)
	}
	return string(tmps)
}
func randUnrecognizedTransport(r randyTransport, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldTransport(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldTransport(dAtA []byte, r randyTransport, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateTransport(dAtA, uint64(key))
		v6 := r.Int63()
		if r.Intn(2) == 0 {
			v6 *= -1
		}
		dAtA = encodeVarintPopulateTransport(dAtA, uint64(v6))
	case 1:
		dAtA = encodeVarintPopulateTransport(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateTransport(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateTransport(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateTransport(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateTransport(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Transport) Size() (n int) {
	var l int
	_ = l
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovTransport(uint64(l))
	}
	if len(m.Tensors) > 0 {
		for k, v := range m.Tensors {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTransport(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTransport(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTransport(uint64(mapEntrySize))
		}
	}
	if len(m.MetaData) > 0 {
		for k, v := range m.MetaData {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovTransport(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovTransport(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTransport(uint64(mapEntrySize))
		}
	}
	return n
}

func sovTransport(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTransport(x uint64) (n int) {
	return sovTransport(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Transport) String() string {
	if this == nil {
		return "nil"
	}
	keysForTensors := make([]string, 0, len(this.Tensors))
	for k, _ := range this.Tensors {
		keysForTensors = append(keysForTensors, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTensors)
	mapStringForTensors := "map[string]*Tensor{"
	for _, k := range keysForTensors {
		mapStringForTensors += fmt.Sprintf("%v: %v,", k, this.Tensors[k])
	}
	mapStringForTensors += "}"
	keysForMetaData := make([]string, 0, len(this.MetaData))
	for k, _ := range this.MetaData {
		keysForMetaData = append(keysForMetaData, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMetaData)
	mapStringForMetaData := "map[string][]byte{"
	for _, k := range keysForMetaData {
		mapStringForMetaData += fmt.Sprintf("%v: %v,", k, this.MetaData[k])
	}
	mapStringForMetaData += "}"
	s := strings.Join([]string{`&Transport{`,
		`Target:` + fmt.Sprintf("%v", this.Target) + `,`,
		`Tensors:` + mapStringForTensors + `,`,
		`MetaData:` + mapStringForMetaData + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTransport(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Transport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Transport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Transport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tensors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransport
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tensors == nil {
				m.Tensors = make(map[string]*Tensor)
			}
			var mapkey string
			var mapvalue *Tensor
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTransport
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTransport
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTransport
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTransport
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTransport
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthTransport
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Tensor{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTransport(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTransport
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tensors[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransport
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MetaData == nil {
				m.MetaData = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTransport
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTransport
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTransport
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTransport
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthTransport
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTransport(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTransport
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.MetaData[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTransport(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTransport
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTransport
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTransport
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTransport(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTransport = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTransport   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("transport.proto", fileDescriptor_transport_45a2ac20b5748fd6) }

var fileDescriptor_transport_45a2ac20b5748fd6 = []byte{
	// 305 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2f, 0x29, 0x4a, 0xcc,
	0x2b, 0x2e, 0xc8, 0x2f, 0x2a, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2e, 0x29, 0x29,
	0x90, 0xe2, 0x29, 0x49, 0xcd, 0x2b, 0xce, 0x2f, 0x82, 0x08, 0x49, 0x29, 0xa5, 0xe7, 0xa7, 0xe7,
	0xeb, 0x83, 0xd9, 0x49, 0xa5, 0x69, 0xfa, 0x20, 0x1e, 0x98, 0x03, 0x66, 0x41, 0xd4, 0x28, 0xcd,
	0x62, 0xe2, 0xe2, 0x0c, 0x81, 0x19, 0x25, 0x24, 0xc6, 0xc5, 0x16, 0x92, 0x58, 0x94, 0x9e, 0x5a,
	0x22, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x19, 0x04, 0xe5, 0x09, 0x99, 0x72, 0xb1, 0x87, 0x80, 0x4d,
	0x2e, 0x96, 0x60, 0x52, 0x60, 0xd6, 0xe0, 0x36, 0x92, 0xd6, 0x2b, 0x29, 0x29, 0xd0, 0x83, 0x6b,
	0xd4, 0x83, 0xca, 0xba, 0xe6, 0x95, 0x14, 0x55, 0x06, 0xc1, 0xd4, 0x0a, 0x59, 0x70, 0x71, 0xf8,
	0xa6, 0x96, 0x24, 0xba, 0x24, 0x96, 0x24, 0x4a, 0x30, 0x83, 0xf5, 0xc9, 0xa0, 0xe9, 0x83, 0x49,
	0x43, 0x34, 0xc2, 0x55, 0x4b, 0xb9, 0x73, 0xf1, 0x20, 0x1b, 0x29, 0x24, 0xc0, 0xc5, 0x9c, 0x9d,
	0x5a, 0x09, 0x75, 0x15, 0x88, 0x29, 0xa4, 0xc8, 0xc5, 0x5a, 0x96, 0x98, 0x53, 0x9a, 0x2a, 0xc1,
	0xa4, 0xc0, 0xa8, 0xc1, 0x6d, 0xc4, 0x0d, 0x31, 0x18, 0xac, 0x27, 0x08, 0x22, 0x63, 0xc5, 0x64,
	0xc1, 0x28, 0x65, 0xcd, 0xc5, 0x8b, 0x62, 0x07, 0x16, 0x93, 0x44, 0x90, 0x4d, 0xe2, 0x41, 0xd2,
	0xec, 0x14, 0x76, 0xe3, 0xa1, 0x1c, 0xc3, 0x83, 0x87, 0x72, 0x8c, 0x1f, 0x1e, 0xca, 0x31, 0xfe,
	0x78, 0x28, 0xc7, 0xd8, 0xf0, 0x48, 0x8e, 0x71, 0xc5, 0x23, 0x39, 0xc6, 0x1d, 0x8f, 0xe4, 0x18,
	0x4f, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5,
	0x18, 0xb8, 0x84, 0x92, 0xf3, 0x73, 0xf5, 0x20, 0x11, 0x50, 0x92, 0x58, 0x9c, 0x0d, 0x72, 0x90,
	0x13, 0x3f, 0xdc, 0xab, 0x01, 0xa0, 0xe0, 0x2e, 0x0e, 0x60, 0xfc, 0xc1, 0xc8, 0x98, 0xc4, 0x06,
	0x0e, 0x7b, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x25, 0xfb, 0x74, 0x59, 0xc5, 0x01, 0x00,
	0x00,
}
